/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AInterface extends ethers.utils.Interface {
  functions: {
    "c()": FunctionFragment;
    "num()": FunctionFragment;
    "sender()": FunctionFragment;
    "setVars(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "c", values?: undefined): string;
  encodeFunctionData(functionFragment: "num", values?: undefined): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVars",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "c", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "num", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVars", data: BytesLike): Result;

  events: {};
}

export class A extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AInterface;

  functions: {
    c(overrides?: CallOverrides): Promise<[string]>;

    "c()"(overrides?: CallOverrides): Promise<[string]>;

    num(overrides?: CallOverrides): Promise<[BigNumber]>;

    "num()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sender(overrides?: CallOverrides): Promise<[string]>;

    "sender()"(overrides?: CallOverrides): Promise<[string]>;

    setVars(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVars(address,uint256)"(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  c(overrides?: CallOverrides): Promise<string>;

  "c()"(overrides?: CallOverrides): Promise<string>;

  num(overrides?: CallOverrides): Promise<BigNumber>;

  "num()"(overrides?: CallOverrides): Promise<BigNumber>;

  sender(overrides?: CallOverrides): Promise<string>;

  "sender()"(overrides?: CallOverrides): Promise<string>;

  setVars(
    _contract: string,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVars(address,uint256)"(
    _contract: string,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    c(overrides?: CallOverrides): Promise<string>;

    "c()"(overrides?: CallOverrides): Promise<string>;

    num(overrides?: CallOverrides): Promise<BigNumber>;

    "num()"(overrides?: CallOverrides): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<string>;

    "sender()"(overrides?: CallOverrides): Promise<string>;

    setVars(
      _contract: string,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVars(address,uint256)"(
      _contract: string,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    c(overrides?: CallOverrides): Promise<BigNumber>;

    "c()"(overrides?: CallOverrides): Promise<BigNumber>;

    num(overrides?: CallOverrides): Promise<BigNumber>;

    "num()"(overrides?: CallOverrides): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;

    "sender()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVars(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVars(address,uint256)"(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "c()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "num()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setVars(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVars(address,uint256)"(
      _contract: string,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
