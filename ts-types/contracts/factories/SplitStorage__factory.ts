/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitStorage } from "../SplitStorage";

export class SplitStorage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SplitStorage> {
    return super.deploy(overrides || {}) as Promise<SplitStorage>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SplitStorage {
    return super.attach(address) as SplitStorage;
  }
  connect(signer: Signer): SplitStorage__factory {
    return super.connect(signer) as SplitStorage__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitStorage {
    return new Contract(address, _abi, signerOrProvider) as SplitStorage;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceForWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokenWindowBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610178806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b1461009b5780638f182402146100e0578063ba0bafb41461010057600080fd5b80632eb4a7ab1461006c57806381e580d314610088575b600080fd5b61007560005481565b6040519081526020015b60405180910390f35b61007561009636600461012a565b610109565b6002546100bb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161007f565b6100756100ee36600461012a565b60076020526000908152604090205481565b61007560015481565b6006818154811061011957600080fd5b600091825260209091200154905081565b60006020828403121561013b578081fd5b503591905056fea2646970667358221220b8afe5208f1fea7214236584baf1a6042dfe58786479a023cf1ef45844babf6864736f6c63430008040033";
