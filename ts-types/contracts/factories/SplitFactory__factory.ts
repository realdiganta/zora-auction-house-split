/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitFactory } from "../SplitFactory";

export class SplitFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    splitter_: string,
    wethAddress_: string,
    auctionHouse_: string,
    overrides?: Overrides
  ): Promise<SplitFactory> {
    return super.deploy(
      splitter_,
      wethAddress_,
      auctionHouse_,
      overrides || {}
    ) as Promise<SplitFactory>;
  }
  getDeployTransaction(
    splitter_: string,
    wethAddress_: string,
    auctionHouse_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      splitter_,
      wethAddress_,
      auctionHouse_,
      overrides || {}
    );
  }
  attach(address: string): SplitFactory {
    return super.attach(address) as SplitFactory;
  }
  connect(signer: Signer): SplitFactory__factory {
    return super.connect(signer) as SplitFactory__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitFactory {
    return new Contract(address, _abi, signerOrProvider) as SplitFactory;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "splitter_",
        type: "address",
      },
      {
        internalType: "address",
        name: "wethAddress_",
        type: "address",
      },
      {
        internalType: "address",
        name: "auctionHouse_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "auctionHouse",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    name: "createSplit",
    outputs: [
      {
        internalType: "address",
        name: "splitProxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161095e38038061095e83398101604081905261002f91610072565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526100b4565b80516001600160a01b038116811461006d57600080fd5b919050565b600080600060608486031215610086578283fd5b61008f84610056565b925061009d60208501610056565b91506100ab60408501610056565b90509250925092565b60805160601c60a05160601c60c05160601c6108736100eb600039600061013e015260006101170152600060dd01526108736000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634e7da112116100505780634e7da112146100ff5780634f0e0ef314610112578063ed9152c81461013957600080fd5b806303fca847146100775780632eb4a7ab146100c15780633cd8045e146100d8575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ca60005481565b6040519081526020016100b8565b6100977f000000000000000000000000000000000000000000000000000000000000000081565b61009761010d366004610234565b610160565b6100977f000000000000000000000000000000000000000000000000000000000000000081565b6100977f000000000000000000000000000000000000000000000000000000000000000081565b6000828155600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055604080516020810185905201604051602081830303815290604052805190602001206040516101d390610227565b8190604051809103906000f59050801580156101f3573d6000803e3d6000fd5b5060008055600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559392505050565b6105c28061027c83390190565b60008060408385031215610246578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610270578182fd5b80915050925092905056fe608060405234801561001057600080fd5b50336001600160a01b0316633cd8045e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561004c57600080fd5b505af1158015610060573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061008491906102ed565b600560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316634f0e0ef36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100e557600080fd5b505af11580156100f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011d91906102ed565b600460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316632eb4a7ab6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561017e57600080fd5b505af1158015610192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b6919061031b565b600081905550336001600160a01b031663ed9152c86040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156101f757600080fd5b505af115801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f91906102ed565b600360006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b03166303fca8476040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c891906102ed565b600280546001600160a01b0319166001600160a01b0392909216919091179055610333565b6000602082840312156102fe578081fd5b81516001600160a01b0381168114610314578182fd5b9392505050565b60006020828403121561032c578081fd5b5051919050565b610280806103426000396000f3fe6080604052600436106100695760003560e01c80638da5cb5b116100435780638da5cb5b146101645780638f18240214610191578063ba0bafb4146101be57610087565b80632eb4a7ab146100cf5780633cd8045e146100f857806381e580d31461014457610087565b36610087573460096000828254610080919061020d565b9091555050005b60006100a860055473ffffffffffffffffffffffffffffffffffffffff1690565b905060405136600082376000803683855af43d806000843e8180156100cb578184f35b8184fd5b3480156100db57600080fd5b506100e560005481565b6040519081526020015b60405180910390f35b34801561010457600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ef565b34801561015057600080fd5b506100e561015f3660046101f5565b6101d4565b34801561017057600080fd5b5060025461011f9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561019d57600080fd5b506100e56101ac3660046101f5565b60076020526000908152604090205481565b3480156101ca57600080fd5b506100e560015481565b600681815481106101e457600080fd5b600091825260209091200154905081565b600060208284031215610206578081fd5b5035919050565b60008219821115610245577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50019056fea264697066735822122015f0ab812fd422ee1676c3fdeb6556295be20f5a722dc37685f4d8628f346a9164736f6c63430008040033a26469706673582212206710b9e161762e796ed58b95781ecc263a2a6f21245db0be18a7fd4286630f6e64736f6c63430008040033";
